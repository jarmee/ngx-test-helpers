{"version":3,"file":"ngx-test-helpers.js","sources":["ts/ngx-test-helpers.ts","ts/public_api.ts","ts/src/ngrx.ts","ts/src/angular.ts","ts/src/dom.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {setupComponentTest,configureComponentTestEnvironment,mergeModuleDefs,createComponent,forceChangeDetection,expectComponent,expectElementFromFixture,expectElementsFromFixture,expectFormElementFromFixture,expectViewChildFromFixture,componentFromFixture,viewChildFromFixture,formElementFromFixture,elementFromFixture,childComponentsFromFixture,elementsFromFixture,configureTestEnvironment,expectElement,expectElements,elementByQuery,elementsByQuery,childComponentsByQuery,ReducerConfig,configureEffectsTestEnvironment,getModuleDefForStore,getAppState,expectActionToBeDispatched,expectActionNotToBeDispatched} from './public_api';\n","/// <reference types=\"jasmine\" />\n\nexport {setupComponentTest,configureComponentTestEnvironment,mergeModuleDefs,createComponent,forceChangeDetection,expectComponent,expectElementFromFixture,expectElementsFromFixture,expectFormElementFromFixture,expectViewChildFromFixture,componentFromFixture,viewChildFromFixture,formElementFromFixture,elementFromFixture,childComponentsFromFixture,elementsFromFixture,configureTestEnvironment} from './src/angular';\nexport {expectElement,expectElements,elementByQuery,elementsByQuery,childComponentsByQuery} from './src/dom';\nexport {ReducerConfig,configureEffectsTestEnvironment,getModuleDefForStore,getAppState,expectActionToBeDispatched,expectActionNotToBeDispatched} from './src/ngrx';\n","import { InjectionToken, ModuleWithProviders } from '@angular/core';\nimport { ComponentFixture, TestBed, TestModuleMetadata, inject } from '@angular/core/testing';\nimport { provideMockActions } from '@ngrx/effects/testing';\nimport { Action, ActionReducer, ActionReducerMap, Store, StoreModule, combineReducers } from '@ngrx/store';\nimport { isUndefined } from 'lodash-es';\nimport { Observable } from 'rxjs/Observable';\nimport { configureTestEnvironment, mergeModuleDefs } from './angular';\n\nexport interface ReducerConfig<T> {\n    injectionToken: InjectionToken<ActionReducerMap<T>>;\n    reducers: ActionReducerMap<T>;\n}\n/**\n * @template T\n * @param {?} EffectsClass\n * @param {?} actionsFn\n * @param {?} moduleDef\n * @param {?} reducerConfig\n * @param {?=} appState\n * @return {?}\n */\nexport function configureEffectsTestEnvironment<T>(\n    // tslint:disable-next-line:variable-name\n    EffectsClass: {},\n    actionsFn: () => Observable<Action>,\n    moduleDef: TestModuleMetadata,\n    reducerConfig: ReducerConfig<T>,\n    appState?: T\n) {\n    configureTestEnvironment(\n        mergeModuleDefs(\n            getModuleDefForStore(reducerConfig, appState),\n            {\n                providers: [\n                    EffectsClass,\n                    provideMockActions(actionsFn)\n                ]\n            },\n            moduleDef\n        )\n    );\n}\n/**\n * @template T\n * @param {?} reducerConfig\n * @param {?=} appState\n * @return {?}\n */\nexport function getModuleDefForStore<T>(reducerConfig: ReducerConfig<T>, appState?: T): TestModuleMetadata {\n    return {\n        imports: [\n            StoreModule.forRoot(reducerConfig.injectionToken, {\n                initialState: isUndefined(appState) ? {} : appState\n            })\n        ],\n        providers: [\n            { provide: reducerConfig.injectionToken, useValue: reducerConfig.reducers }\n        ]\n    };\n}\n/**\n * @template T\n * @param {?} stateFn\n * @return {?}\n */\nexport function getAppState<T>(stateFn: (T) => void) {\n    getStore().subscribe(appState => stateFn(appState));\n}\n/**\n * @param {?} fixture\n * @param {?} actionType\n * @param {?=} triggerFn\n * @param {?=} payload\n * @return {?}\n */\nexport function expectActionToBeDispatched(fixture: ComponentFixture<{}>, actionType: string, triggerFn?: () => void, payload?: any) {\n    const /** @type {?} */ action = triggerAndWatchForAction(fixture, actionType, triggerFn);\n    expect(action).not.toBeUndefined();\n\n    if (!isUndefined(payload)) {\n        // tslint:disable-next-line:no-string-literal\n        expect(action['payload']).toEqual(payload);\n    }\n}\n/**\n * @param {?} fixture\n * @param {?} actionType\n * @param {?=} triggerFn\n * @return {?}\n */\nexport function expectActionNotToBeDispatched(fixture: ComponentFixture<{}>, actionType: string, triggerFn?: () => void) {\n    const /** @type {?} */ action = triggerAndWatchForAction(fixture, actionType, triggerFn);\n    expect(action).toBeUndefined();\n}\n/**\n * @param {?} fixture\n * @param {?} actionType\n * @param {?=} triggerFn\n * @return {?}\n */\nfunction triggerAndWatchForAction(fixture: ComponentFixture<{}>, actionType: string, triggerFn = () => {}): Action {\n    const /** @type {?} */ store = TestBed.get(Store);\n    let /** @type {?} */ storeDispatchSpy;\n\n    if (isUndefined(store.dispatch.calls)) {\n        storeDispatchSpy = spyOn(store, 'dispatch').and.callThrough();\n    } else {\n        storeDispatchSpy = store.dispatch;\n        storeDispatchSpy.calls.reset();\n    }\n\n    triggerFn();\n\n    fixture.detectChanges();\n\n    const /** @type {?} */ expectedCall = storeDispatchSpy.calls\n        .all()\n        .find(\n            call => (!isUndefined(call.args[0]) && (call.args[0].type === actionType))\n        );\n\n    return isUndefined(expectedCall) ? expectedCall : expectedCall.args[0];\n}\n/**\n * @template T\n * @return {?}\n */\nfunction getStore<T>(): Store<T> {\n    return TestBed.get(Store);\n}\n","import { ElementRef, NO_ERRORS_SCHEMA, Type } from '@angular/core';\nimport { ComponentFixture, TestBed, TestModuleMetadata } from '@angular/core/testing';\nimport { isArray, isUndefined, mergeWith } from 'lodash-es';\nimport { elementByQuery, elementsByQuery } from './dom';\n\nconst /** @type {?} */ defaultModuleDef: TestModuleMetadata = {\n    imports: [],\n    providers: [],\n    declarations: [],\n    schemas: []\n};\n/**\n * @param {?} moduleDef\n * @return {?}\n */\nexport function setupComponentTest(moduleDef: TestModuleMetadata) {\n    // workaround to improve component tests: prevent testing module from\n    // being reset after every spec\n    // see https://github.com/angular/angular/issues/12409\n\n    const /** @type {?} */ resetTestingModuleFn = TestBed.resetTestingModule;\n\n    beforeAll(() => {\n        TestBed.resetTestingModule();\n        configureComponentTestEnvironment(moduleDef);\n        TestBed.resetTestingModule = () => TestBed;\n    });\n\n    afterAll(() => {\n        TestBed.resetTestingModule = resetTestingModuleFn;\n    });\n}\n/**\n * @param {?} moduleDef\n * @return {?}\n */\nexport function configureComponentTestEnvironment(moduleDef: TestModuleMetadata) {\n    configureTestEnvironment(\n        mergeModuleDefs(\n            {\n                schemas: [\n                    NO_ERRORS_SCHEMA\n                ]\n            },\n            moduleDef\n        )\n    )\n        .compileComponents();\n}\n/**\n * @param {...?} moduleDefs\n * @return {?}\n */\nexport function mergeModuleDefs(...moduleDefs: TestModuleMetadata[]) {\n    return moduleDefs.reduce(\n        (moduleDef1, moduleDef2) => mergeWith(\n            moduleDef1,\n            moduleDef2,\n            (newValue, value) => isArray(newValue) ? newValue.concat(value) : undefined\n        ),\n        defaultModuleDef\n    );\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function createComponent<T>(component: Type<T>) {\n    return TestBed.createComponent<T>(component);\n}\n/**\n * @template T\n * @param {?} fixture\n * @return {?}\n */\nexport function forceChangeDetection<T>(fixture: ComponentFixture<T>) {\n    // Forces change detection even on components with change detection set to OnPush\n    // see https://github.com/angular/angular/issues/12313#issuecomment-300429985\n    // tslint:disable-next-line\n    ( /** @type {?} */((<any> fixture.changeDetectorRef)))._view.nodes[0].componentView.state |= (1 << 3);\n}\n/**\n * @template T\n * @param {?} fixture\n * @return {?}\n */\nexport function expectComponent<T>(fixture: ComponentFixture<T>) {\n    return expect(fixture.componentInstance);\n}\n/**\n * @template T\n * @param {?} fixture\n * @param {?=} domQuery\n * @return {?}\n */\nexport function expectElementFromFixture<T>(fixture: ComponentFixture<T>, domQuery?: string): jasmine.Matchers<{} | null> {\n    return expect(elementFromFixture(fixture, domQuery));\n}\n/**\n * @template T\n * @param {?} fixture\n * @param {?} domQuery\n * @return {?}\n */\nexport function expectElementsFromFixture<T>(fixture: ComponentFixture<T>, domQuery: string): jasmine.ArrayLikeMatchers<{}> {\n    return expect(elementsFromFixture(fixture, domQuery));\n}\n/**\n * @template T\n * @param {?} fixture\n * @param {?} formControlName\n * @return {?}\n */\nexport function expectFormElementFromFixture<T>(fixture: ComponentFixture<T>, formControlName: string): jasmine.Matchers<{} | null> {\n    return expect(elementFromFixture(fixture, getFormControlDomQuery(formControlName)));\n}\n/**\n * @template T\n * @param {?} fixture\n * @param {?} viewChildProperty\n * @return {?}\n */\nexport function expectViewChildFromFixture<T>(fixture: ComponentFixture<T>, viewChildProperty: string): jasmine.Matchers<{}> {\n    return expect(viewChildFromFixture(fixture, viewChildProperty));\n}\n/**\n * @template T\n * @param {?} fixture\n * @return {?}\n */\nexport function componentFromFixture<T>(fixture: ComponentFixture<T>): T {\n    return fixture.componentInstance;\n}\n/**\n * @template T\n * @param {?} fixture\n * @param {?} viewChildProperty\n * @return {?}\n */\nexport function viewChildFromFixture<T>(fixture: ComponentFixture<T>, viewChildProperty: string): Element {\n    return ( /** @type {?} */((<HTMLElement> fixture.componentInstance[viewChildProperty].nativeElement)));\n}\n/**\n * @template T\n * @param {?} fixture\n * @param {?} formControlName\n * @return {?}\n */\nexport function formElementFromFixture<T>(fixture: ComponentFixture<T>, formControlName: string): Element | null {\n    return elementFromFixture(fixture, getFormControlDomQuery(formControlName));\n}\n/**\n * @template T\n * @param {?} fixture\n * @param {?=} domQuery\n * @return {?}\n */\nexport function elementFromFixture<T>(fixture: ComponentFixture<T>, domQuery?: string): Element | null {\n    const /** @type {?} */ nativeElement = getNativeElement(fixture);\n    return isUndefined(domQuery) ? nativeElement : elementByQuery(nativeElement, domQuery);\n}\n/**\n * @template T\n * @param {?} fixture\n * @param {?} domQuery\n * @return {?}\n */\nexport function childComponentsFromFixture<T>(fixture: ComponentFixture<{}>, domQuery: string): T[] {\n    return /** @type {?} */(( ( /** @type {?} */((<{}> elementsFromFixture(fixture, domQuery)))) as T[]));\n}\n/**\n * @template T\n * @param {?} fixture\n * @param {?} domQuery\n * @return {?}\n */\nexport function elementsFromFixture<T>(fixture: ComponentFixture<T>, domQuery: string): Element[] {\n    const /** @type {?} */ nativeElement = getNativeElement(fixture);\n    return elementsByQuery(nativeElement, domQuery);\n}\n/**\n * @param {?} moduleDef\n * @return {?}\n */\nexport function configureTestEnvironment(moduleDef: TestModuleMetadata) {\n    return TestBed\n        .configureTestingModule(moduleDef);\n}\n/**\n * @template T\n * @param {?} fixture\n * @return {?}\n */\nfunction getNativeElement<T>(fixture: ComponentFixture<T>): HTMLElement {\n    fixture.detectChanges();\n    return fixture.nativeElement;\n}\n/**\n * @param {?} formControlName\n * @return {?}\n */\nfunction getFormControlDomQuery(formControlName: string): string {\n    return `[formcontrolname=\"${formControlName}\"]`;\n}\n","import { ComponentFixture } from '@angular/core/testing';\nimport { isUndefined, toArray } from 'lodash-es';\n/**\n * @param {?} rootElement\n * @param {?} domQuery\n * @return {?}\n */\nexport function expectElement(rootElement: Element, domQuery: string): jasmine.Matchers<{} | null> {\n    return expect(elementByQuery(rootElement, domQuery));\n}\n/**\n * @param {?} rootElement\n * @param {?} domQuery\n * @return {?}\n */\nexport function expectElements(rootElement: Element, domQuery: string): jasmine.ArrayLikeMatchers<{}> {\n    return expect(elementsByQuery(rootElement, domQuery));\n}\n/**\n * @param {?} rootElement\n * @param {?} domQuery\n * @return {?}\n */\nexport function elementByQuery(rootElement: Element, domQuery: string): Element | null {\n    return rootElement.querySelector(domQuery);\n}\n/**\n * @param {?} rootElement\n * @param {?} domQuery\n * @return {?}\n */\nexport function elementsByQuery(rootElement: Element, domQuery: string): Element[] {\n    return toArray<Element>(rootElement.querySelectorAll(domQuery));\n}\n/**\n * @template T\n * @param {?} rootElement\n * @param {?} domQuery\n * @return {?}\n */\nexport function childComponentsByQuery<T>(rootElement: Element, domQuery: string): T[] {\n    return /** @type {?} */(( ( /** @type {?} */((<{}> elementsByQuery(rootElement, domQuery)))) as T[]));\n}\n"],"names":["store"],"mappings":"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"}
